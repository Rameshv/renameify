{"name":"renameify","tagline":"replaces variable names","body":"# Synopsis\r\n\r\n**renameify** is a [browserify](https://github.com/substack/node-browserify) transform for replacing variable, function and property names.\r\n\r\nThis library uses [browserify-transform-tools](https://github.com/benbria/browserify-transform-tools), so you can also supply the configuration by adding a `renameify` field to your project's `package.json` file.\r\n\r\n[![stability 3 - stable](http://b.repl.ca/v1/stability-3_--_stable-yellowgreen.png)](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/renameify)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/renameify.png?branch=master)](https://travis-ci.org/pluma/renameify) [![Coverage Status](https://coveralls.io/repos/pluma/renameify/badge.png?branch=master)](https://coveralls.io/r/pluma/renameify?branch=master) [![Dependencies](https://david-dm.org/pluma/renameify.png?theme=shields.io)](https://david-dm.org/pluma/renameify)\r\n\r\n[![NPM status](https://nodei.co/npm/renameify.png?compact=true)](https://npmjs.org/package/renameify)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install renameify\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/renameify.git\r\ncd renameify\r\nnpm install\r\nmake test\r\n```\r\n\r\n# Basic usage example\r\n\r\n## Source\r\n\r\n```javascript\r\nvar someVariableName = 20;\r\nconsole.log(someVariableName);\r\n```\r\n\r\n## Result\r\n\r\n```javascript\r\nvar newVariableName = 20;\r\nconsole.log(newVariableName);\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    renameify = require('renameify'),\r\n    b = browserify();\r\n\r\nb.transform(renameify.configure({\r\n    variables: {'someVariableName': 'newVariableName'}\r\n}));\r\nb.add('./app.js');\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n# Usage example with package.json\r\n\r\n## package.json\r\n\r\n```json\r\n{\r\n    \"name\": \"my-awesome-project\",\r\n    \"devDependencies\": {\r\n        \"browserify\": \"*\",\r\n        \"renameify\": \"*\"\r\n    },\r\n    \"renameify\": {\r\n        \"variables\": {\"someVariableName\": \"newVariableName\"}\r\n    }\r\n}\r\n```\r\n\r\n### Usage (API)\r\n\r\n```javascript\r\nvar browserify = require('browserify'),\r\n    renameify = require('renameify'),\r\n    b = browserify();\r\n\r\nb.transform(renameify);\r\nb.add('./app.js');\r\nb.bundle().pipe(require('fs').createWriteStream('bundle.js'));\r\n```\r\n\r\n### Usage (Shell)\r\n\r\n```sh\r\nbrowserify -t renameify ./app.js > bundle.js\r\n```\r\n\r\n# API\r\n\r\n## renameify.configure(rules):transform\r\n\r\nCreates a browserify transform that will replace the given names.\r\n\r\n### rules.variables\r\n\r\nReplaces all matching variable names. This includes local (`var`, `let`, etc) and global variables, as well as argument names in function declarations and function expressions.\r\n\r\n### rules.properties\r\n\r\nReplaces all matching property names. This includes names used in object literals (`foo` in `{foo: 2}`, `{'foo': 2}` and `{\"foo\": 2}`) as well as in property references (`foo` in `bar.foo`, `bar['foo']` and `bar[\"foo\"]`).\r\n\r\n### rules.functions\r\n\r\nReplaces all matching function names. This includes function declarations as well as named function expressions.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/renameify/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}